---
interface Props {
  title: string;
  email: string;
  phoneNumber: string;
  address: string;
}

const { title, email, phoneNumber, address } = Astro.props;

// Function to encode address for Google Maps URL
const encodedAddress = encodeURIComponent(address);
---

<section id="contact" class="py-16 bg-gray-50">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl font-bold text-center mb-12">{title}</h2>
    
    <div class="grid md:grid-cols-2 gap-8">
      <!-- Contact Form -->
      <div class="bg-white p-6 rounded-lg shadow-lg">
        <h3 class="text-xl font-semibold mb-4">Send us a Message</h3>
        <form id="contactForm" class="space-y-4">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
            <input 
              type="text" 
              id="name" 
              name="name" 
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
          </div>
          
          <div>
            <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
          </div>
          
          <div>
            <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">Subject</label>
            <input 
              type="text" 
              id="subject" 
              name="subject" 
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
          </div>
          
          <div>
            <label for="message" class="block text-sm font-medium text-gray-700 mb-1">Message</label>
            <textarea 
              id="message" 
              name="message" 
              rows="4" 
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            ></textarea>
          </div>
          
          <div id="formMessage" class="hidden p-3 rounded-md"></div>
          <button 
            type="submit" 
            id="submitButton"
            class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors font-medium"
          >
            Send Message
          </button>
        </form>
      </div>
      
      <!-- Map and Contact Info -->
      <div class="space-y-6">
        <!-- Map -->
        <div class="h-64 bg-gray-200 rounded-lg overflow-hidden">
          <iframe 
            width="100%" 
            height="100%" 
            frameborder="0" 
            style="border:0" 
            referrerpolicy="no-referrer-when-downgrade"
            src={`https://www.google.com/maps/embed/v1/place?key=AIzaSyBf4NSKdh-foEZf4tyQJzVbxJywcbprdNs&q=${encodedAddress}`}
            allowfullscreen>
          </iframe>
        </div>
        
        <!-- Contact Information -->
        <div class="bg-white p-6 rounded-lg shadow-lg">
          <h3 class="text-xl font-semibold mb-4">Contact Information</h3>
          <div class="space-y-3">
            <div class="flex items-start">
              <svg class="h-6 w-6 text-blue-600 mr-3 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
              <a href={`mailto:${email}`} class="text-gray-700 hover:text-blue-600 transition-colors">
                {email}
              </a>
            </div>
            
            <div class="flex items-start">
              <svg class="h-6 w-6 text-blue-600 mr-3 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
              </svg>
              <a href={`tel:${phoneNumber.replace(/\D/g, '')}`} class="text-gray-700 hover:text-blue-600 transition-colors">
                {phoneNumber}
              </a>
            </div>
            
            <div class="flex items-start">
              <svg class="h-6 w-6 text-blue-600 mr-3 mt-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <span class="text-gray-700">
                {address.split(',').map((line, i) => (
                  <span class="block">{line.trim()}</span>
                ))}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  const form = document.getElementById('contactForm') as HTMLFormElement | null;
  const formMessage = document.getElementById('formMessage') as HTMLDivElement | null;
  const submitButton = document.getElementById('submitButton') as HTMLButtonElement | null;

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Disable the submit button
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = 'Sending...';
      }
      
      // Clear previous messages
      if (formMessage) {
        formMessage.classList.add('hidden');
      }
      
      try {
        if (!form) {
          throw new Error('Form element not found');
        }
        const formData = new FormData(form);
        const response = await fetch('/api/contact', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        // Show success/error message
        if (formMessage) {
          formMessage.textContent = result.message || result.error || 'Message sent successfully!';
          formMessage.className = response.ok ? 'success-message' : 'error-message';
          formMessage.classList.remove('hidden');
        }
        
        // Reset form if successful
        if (response.ok && form) {
          form.reset();
          // Scroll to show the success message
          if (formMessage) {
            formMessage.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }
        }
      } catch (error) {
        console.error('Error:', error);
        if (formMessage) {
          formMessage.textContent = 'An error occurred. Please try again later.';
          formMessage.className = 'error-message';
          formMessage.classList.remove('hidden');
        }
      } finally {
        // Re-enable the submit button
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = 'Send Message';
        }
      }
    });
  }
</script>