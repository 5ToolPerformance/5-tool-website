---
import { getAllCoaches } from '../../lib/coachesHelper';
import CoachCard from '../cards/CoachCard.astro';

export interface Props {
  title: string;
  subtitle?: string;
  description?: string;
}

const { title, subtitle, description } = Astro.props;

// Fetch all coaches
const coaches = await getAllCoaches();
---

<section class="bg-gray-50 py-16 sm:py-24">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-2xl text-center">
      {subtitle && (
        <p class="text-base font-semibold leading-7 text-blue-600">{subtitle}</p>
      )}
      <h2 class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">
        {title}
      </h2>
      {description && (
        <p class="mt-6 text-lg leading-8 text-gray-600">
          {description}
        </p>
      )}
    </div>

    {coaches.length > 0 ? (
      <div class="mt-16">
        <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div class="relative">
            {coaches.length > 3 && (
              <div class="absolute top-1/2 -left-10 -translate-y-1/2 z-10">
                <button 
                  type="button" 
                  class="flex h-10 w-10 items-center justify-center rounded-full bg-white text-gray-900 shadow-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                  id="coach-prev"
                  aria-label="Previous slide"
                >
                  <span class="sr-only">Previous</span>
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
            )}
            
            <div class="overflow-hidden">
              <div 
                id="coaches-carousel" 
                class="flex transition-transform duration-300 ease-in-out"
                style={`--desktop-width: ${coaches?.length * 33.333}%; --tablet-width: ${coaches?.length * 50}%; --mobile-width: ${coaches?.length * 100}%;`}
              >
              {coaches.map((coach, index) => (
                <div 
                  class="px-1 transform transition-all duration-300"
                  style="flex: 0 0 33.3333%; max-width: 33.3333%;"
                  data-index={index}
                >
                  <div class="w-full">
                    <CoachCard 
                      name={coach.name}
                      title={coach.title}
                      image={coach.image}
                      description={coach.description}
                      slug={coach.slug.current}
                    />
                  </div>
                </div>
              ))}
              </div>
            </div>
            
            {coaches.length > 3 && (
              <div class="absolute top-1/2 -right-10 -translate-y-1/2 z-10">
                <button 
                  type="button" 
                  class="flex h-10 w-10 items-center justify-center rounded-full bg-white text-gray-900 shadow-md hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                  id="coach-next"
                  aria-label="Next slide"
                >
                  <span class="sr-only">Next</span>
                  <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    ) : (
      <div class="mt-12 text-center">
        <p class="text-gray-500">No coaches found.</p>
      </div>
    )}
  </div>
</section>

<!-- Initialize Custom Carousel -->
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.querySelector('#coaches-carousel');
    const prevButton = document.querySelector('#coach-prev');
    const nextButton = document.querySelector('#coach-next');
    
    if (!carousel) {
      console.error('Carousel element not found');
      return;
    }
    
    const slides = Array.from(carousel.children);
    const slideCount = slides.length;
    let currentIndex = 0;
    
    // Show 3 slides at a time on desktop, 1 on mobile
    const getVisibleSlides = () => window.innerWidth >= 1024 ? 3 : 1;
    
    const updateCarousel = () => {
      const visibleSlides = getVisibleSlides();
      const slideWidth = 100 / visibleSlides;
      
      // Calculate the maximum index to ensure the last card is fully visible
      const maxIndex = slideCount - visibleSlides;
      
      // Ensure currentIndex doesn't exceed the maximum allowed
      currentIndex = Math.min(currentIndex, maxIndex);
      
      // Calculate the translateX based on current index
      const translateX = -currentIndex * slideWidth;
      
      // Update slide widths
      slides.forEach((slide) => {
        slide.style.flex = `0 0 ${slideWidth}%`;
      });
      
      // Move the carousel
      carousel.style.transform = `translateX(${translateX}%)`;
      
      // Update button states
      if (prevButton) {
        prevButton.disabled = currentIndex === 0;
      }
      if (nextButton) {
        nextButton.disabled = currentIndex >= slideCount - visibleSlides;
      }
    };
    
    // Navigation functions
    const nextSlide = () => {
      const visibleSlides = getVisibleSlides();
      if (currentIndex < slideCount - visibleSlides) {
        currentIndex++;
        updateCarousel();
      }
    };
    
    const prevSlide = () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    };
    
    // Event listeners
    if (prevButton) {
      prevButton.addEventListener('click', prevSlide);
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', nextSlide);
    }
    
    // Handle window resize
    let resizeTimer;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        updateCarousel();
      }, 250);
    });
    
    // Initialize
    updateCarousel();
  });
</script>

<style>
  #coaches-carousel {
    display: flex;
    transition: transform 0.3s ease-in-out;
    padding: 0.5rem 0;
    width: var(--desktop-width);
    margin: 0;
    gap: 0;
  }
  
  @media (max-width: 1023px) {
    #coaches-carousel {
      width: var(--tablet-width) !important;
    }
  }
  
  @media (max-width: 639px) {
    #coaches-carousel {
      width: var(--mobile-width) !important;
    }
  }
  
  #coaches-carousel > div {
    padding: 0;
    box-sizing: border-box;
  }
  
  #coach-prev[disabled],
  #coach-next[disabled] {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
  
  @media (max-width: 1023px) {
    #coaches-carousel > div {
      flex: 0 0 50% !important;
      max-width: 50% !important;
    }
  }
  
  @media (max-width: 639px) {
    #coaches-carousel > div {
      flex: 0 0 100% !important;
      max-width: 100% !important;
    }
  }
</style>