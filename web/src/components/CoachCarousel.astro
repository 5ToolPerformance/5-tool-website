---
import CoachCard from './cards/CoachCard.astro';
import type { Image } from '../lib/types';

export interface Coach {
  name: string;
  title: string;
  image: Image;
  description: string;
  slug: string;
}

export interface Props {
  coaches: Coach[];
  title?: string;
}

const { coaches, title = "Meet Our Coaches" } = Astro.props;
---

<section class="py-16 bg-gray-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-12">
      <h2 class="text-3xl font-bold text-gray-900 sm:text-4xl mb-4">{title}</h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Discover our team of experienced coaches ready to help you achieve your goals.
      </p>
    </div>

    <div class="relative">
      <!-- Navigation Buttons -->
      <button 
        id="prevBtn"
        class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 z-10 bg-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Previous coaches"
      >
        <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <button 
        id="nextBtn"
        class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 z-10 bg-white rounded-full p-3 shadow-lg hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Next coaches"
      >
        <svg class="w-6 h-6 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Carousel Container -->
      <div class="overflow-hidden">
        <div 
          id="carousel" 
          class="flex transition-transform duration-300 ease-in-out gap-6"
        >
          {coaches.map((coach) => (
            <div class="flex-none w-full sm:w-1/2 lg:w-1/3 xl:w-1/4">
              <CoachCard {...coach} />
            </div>
          ))}
        </div>
      </div>

      <!-- Dots Indicator -->
      <div class="flex justify-center mt-8 space-x-2" id="dotsContainer">
        <!-- Dots will be generated by JavaScript -->
      </div>
    </div>
  </div>
</section>

<script>
  class CoachCarousel {
    constructor() {
      this.carousel = document.getElementById('carousel');
      this.prevBtn = document.getElementById('prevBtn');
      this.nextBtn = document.getElementById('nextBtn');
      this.dotsContainer = document.getElementById('dotsContainer');
      
      if (!this.carousel || !this.prevBtn || !this.nextBtn) return;
      
      this.currentIndex = 0;
      this.itemsPerView = this.getItemsPerView();
      this.totalItems = this.carousel.children.length;
      this.maxIndex = Math.max(0, this.totalItems - this.itemsPerView);
      
      this.init();
    }

    getItemsPerView() {
      const width = window.innerWidth;
      if (width >= 1280) return 4; // xl
      if (width >= 1024) return 3;  // lg
      if (width >= 640) return 2;   // sm
      return 1;
    }

    init() {
      this.createDots();
      this.updateCarousel();
      this.bindEvents();
    }

    createDots() {
      if (!this.dotsContainer) return;
      
      this.dotsContainer.innerHTML = '';
      const numDots = Math.ceil(this.totalItems / this.itemsPerView);
      
      for (let i = 0; i < numDots; i++) {
        const dot = document.createElement('button');
        dot.className = 'w-3 h-3 rounded-full transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500';
        dot.setAttribute('aria-label', `Go to slide ${i + 1}`);
        dot.addEventListener('click', () => this.goToSlide(i));
        this.dotsContainer.appendChild(dot);
      }
      
      this.updateDots();
    }

    updateDots() {
      if (!this.dotsContainer) return;
      
      const dots = this.dotsContainer.children;
      const activeDotIndex = Math.floor(this.currentIndex / this.itemsPerView);
      
      for (let i = 0; i < dots.length; i++) {
        if (i === activeDotIndex) {
          dots[i].className = dots[i].className.replace('bg-gray-300', 'bg-blue-600');
          if (!dots[i].className.includes('bg-blue-600')) {
            dots[i].className += ' bg-blue-600';
          }
        } else {
          dots[i].className = dots[i].className.replace('bg-blue-600', 'bg-gray-300');
          if (!dots[i].className.includes('bg-gray-300')) {
            dots[i].className += ' bg-gray-300';
          }
        }
      }
    }

    updateCarousel() {
      if (!this.carousel) return;
      
      const translateX = -(this.currentIndex * (100 / this.itemsPerView));
      this.carousel.style.transform = `translateX(${translateX}%)`;
      
      // Update button states
      if (this.prevBtn) this.prevBtn.disabled = this.currentIndex === 0;
      if (this.nextBtn) this.nextBtn.disabled = this.currentIndex >= this.maxIndex;
      
      this.updateDots();
    }

    next() {
      if (this.currentIndex < this.maxIndex) {
        this.currentIndex = Math.min(this.currentIndex + this.itemsPerView, this.maxIndex);
        this.updateCarousel();
      }
    }

    prev() {
      if (this.currentIndex > 0) {
        this.currentIndex = Math.max(this.currentIndex - this.itemsPerView, 0);
        this.updateCarousel();
      }
    }

    goToSlide(slideIndex) {
      this.currentIndex = Math.min(slideIndex * this.itemsPerView, this.maxIndex);
      this.updateCarousel();
    }

    handleResize() {
      const newItemsPerView = this.getItemsPerView();
      if (newItemsPerView !== this.itemsPerView) {
        this.itemsPerView = newItemsPerView;
        this.maxIndex = Math.max(0, this.totalItems - this.itemsPerView);
        this.currentIndex = Math.min(this.currentIndex, this.maxIndex);
        this.createDots();
        this.updateCarousel();
      }
    }

    bindEvents() {
      if (this.nextBtn) this.nextBtn.addEventListener('click', () => this.next());
      if (this.prevBtn) this.prevBtn.addEventListener('click', () => this.prev());
      
      window.addEventListener('resize', () => this.handleResize());
      
      // Touch/swipe support
      let startX = 0;
      let endX = 0;
      
      if (this.carousel) {
        this.carousel.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
        });
        
        this.carousel.addEventListener('touchend', (e) => {
          endX = e.changedTouches[0].clientX;
          const diffX = startX - endX;
          
          if (Math.abs(diffX) > 50) { // Minimum swipe distance
            if (diffX > 0) {
              this.next();
            } else {
              this.prev();
            }
          }
        });
      }

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          this.prev();
        } else if (e.key === 'ArrowRight') {
          this.next();
        }
      });
    }
  }

  // Initialize carousel when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CoachCarousel();
  });

  // Re-initialize on page navigation (for Astro's client-side routing)
  document.addEventListener('astro:page-load', () => {
    new CoachCarousel();
  });
</script>