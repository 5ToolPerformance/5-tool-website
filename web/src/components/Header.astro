---
// Define Props interface
export interface Props {
  logo?: {
    src: string;
    alt: string;
  };
  siteName?: string;
  navLinks?: Array<{
    href: string;
    text: string;
  }>;
}

// Set default props
const { 
  logo,
  siteName = 'My Site',
  navLinks = [
    { href: '/', text: 'Home' },
    { href: '/about', text: 'About' },
    { href: '/contact', text: 'Contact' },
  ]
} = Astro.props;

// Generate unique IDs for mobile menu elements
const menuButtonId = 'mobile-menu-button';
const menuId = 'mobile-menu';
---

<header class="bg-white shadow-sm sticky top-0 z-50 py-4 font-sans">
  <div class="max-w-7xl mx-auto px-6 flex justify-between items-center">
    <a 
      href="/" 
      class="text-2xl font-bold text-gray-800 flex items-center hover:opacity-80 transition-opacity"
    >
      {logo ? (
        <img 
          src={logo.src} 
          alt={logo.alt} 
          class="h-10 w-auto" 
        />
      ) : (
        <span>{siteName}</span>
      )}
    </a>
    
    <nav class="hidden md:block">
      <ul class="flex space-x-6">
        {navLinks.map((link) => (
          <li>
            <a 
              href={link.href} 
              class="text-gray-600 hover:text-gray-900 font-medium transition-colors"
            >
              {link.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <!-- Mobile menu button -->
    <button 
      id={menuButtonId}
      type="button" 
      class="md:hidden text-gray-600 hover:text-gray-900 focus:outline-none"
      aria-expanded="false"
      aria-controls={menuId}
    >
      <span class="sr-only">Open main menu</span>
      <!-- Hamburger icon -->
      <svg id="menu-open-icon" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
      <!-- Close icon (hidden by default) -->
      <svg id="menu-close-icon" class="hidden h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
  </div>

  <!-- Mobile menu, show/hide based on menu state -->
  <div id={menuId} class="md:hidden hidden">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3">
      {navLinks.map((link) => (
        <a 
          href={link.href} 
          class="block px-3 py-2 rounded-md text-base font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50"
        >
          {link.text}
        </a>
      ))}
    </div>
  </div>
</header>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuOpenIcon = document.getElementById('menu-open-icon');
    const menuCloseIcon = document.getElementById('menu-close-icon');
    let isOpen = false;

    function toggleMenu() {
      isOpen = !isOpen;
      
      // Toggle menu visibility
      if (isOpen) {
        mobileMenu.classList.remove('hidden');
        menuOpenIcon.classList.add('hidden');
        menuCloseIcon.classList.remove('hidden');
        menuButton.setAttribute('aria-expanded', 'true');
        
        // Add a small delay for the animation
        setTimeout(() => {
          mobileMenu.classList.add('block');
        }, 10);
      } else {
        mobileMenu.classList.remove('block');
        menuOpenIcon.classList.remove('hidden');
        menuCloseIcon.classList.add('hidden');
        menuButton.setAttribute('aria-expanded', 'false');
        
        // Wait for the transition to complete before hiding the menu
        setTimeout(() => {
          if (!isOpen) {
            mobileMenu.classList.add('hidden');
          }
        }, 200);
      }
    }


    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      const isClickInside = menuButton.contains(e.target) || mobileMenu.contains(e.target);
      if (isOpen && !isClickInside) {
        toggleMenu();
      }
    });

    // Close menu when pressing Escape key
    document.addEventListener('keydown', (e) => {
      if (isOpen && e.key === 'Escape') {
        toggleMenu();
      }
    });

    // Toggle menu when clicking the menu button
    menuButton.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleMenu();
    });
  });
</script>