---
import { loadQuery } from "../lib/load-query";
import { urlForImage } from "../lib/urlForImage";
import ResourceCard from "../components/cards/ResourceCard.astro";
import type { ImageType } from "../lib/types";
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import type { ResourcesType } from "../lib/types";

const { data: resources } = await loadQuery<ResourcesType>({
  query: `*[_type == "resources"][0]{
    ...,
    "content": {
      _type,
      _key,
      ...
    },
    "seo": {
      metaTitle,
      metaDescription,
      focusKeyword,
      canonicalUrl,
      openGraph{
        title,
        description,
        "image": image.asset->url,
        type
      },
      twitter{
        title,
        description,
        "image": image.asset->url,
        cardType
      },
      robots,
      schemaMarkup,
      seoAnalysis,
      additionalMeta
    }
  }`,
});

const bgImageUrl = resources?.heroImage
  ? urlForImage(resources.heroImage).url()
  : "";
---

<Layout seo={resources?.seo} siteUrl="https://www.5tool.com">
  <main>
    <!-- Hero Section -->
    <section class="relative bg-gray-900 text-white">
      {
        bgImageUrl && (
          <div class="absolute inset-0 z-0">
            <Image
              src={bgImageUrl}
              alt=""
              class="w-full h-full object-cover opacity-30"
              loading="eager"
              width={1920}
              height={1080}
            />
          </div>
        )
      }
      <div
        class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 md:py-28 text-center"
      >
        <h1 class="text-4xl md:text-5xl font-extrabold mb-4">
          {resources?.title || "Resources"}
        </h1>
        {
          resources?.description && (
            <p class="text-xl text-gray-200 max-w-3xl mx-auto">
              {resources.description}
            </p>
          )
        }
      </div>
    </section>

    <!-- Resources Grid -->
    <section class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      {
        resources?.resourceCards?.length ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {resources.resourceCards.map((card) => (
              <ResourceCard {...card} />
            ))}
          </div>
        ) : (
          <div class="text-center py-12">
            <p class="text-gray-500 text-lg">
              No resources available at the moment. Please check back later.
            </p>
          </div>
        )
      }
    </section>
  </main>
</Layout>
